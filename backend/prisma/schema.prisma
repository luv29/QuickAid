generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ServiceType {
  TOW
  LOCKOUT
  FUEL_DELIVERY
  TIRE_CHANGE
  JUMP_START
  ELECTRIC_CHARGING
  CAR_REPAIR
  CUSTOM_SERVICE
}

enum BookingStatus {
  BOOKED
  CANCELLED
  CONFIRMED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SenderType {
  USER
  MECHANIC
}

enum SOSStatus {
  ACTIVE
  RESOLVED
}

enum ServiceStatus {
  REQUESTED
  CANCELLED
  CONFIRMED
  COMPLETED
}


model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber       String             @unique
  name              String?
  email             String?
  password          String?
  cars              Car[]
  serviceRequests   ServiceRequest[]   @relation("UserServiceRequests")
  emergencyContacts EmergencyContact[]
  sentMessages      Message[]          @relation("UserMessages")
  sosEvents         SOS[]
}

model Mechanic {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?
  password        String?
  phoneNumber     String           @unique
  services        ServiceType[]
  latitude        Float?
  longitude       Float?
  location        Json? // GeoJSON format for location
  serviceRequests ServiceRequest[] @relation("MechanicServiceRequests")
  sentMessages    Message[]        @relation("MechanicMessages")
}

model Car {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
  make         String
  model        String
  year         Int
  licensePlate String
}

model ServiceRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation("UserServiceRequests", fields: [userId], references: [id])
  mechanicId  String        @db.ObjectId
  mechanic    Mechanic      @relation("MechanicServiceRequests", fields: [mechanicId], references: [id])
  serviceType ServiceType
  latitude    Float
  longitude   Float
  address     String?
  status      ServiceStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  payment     Payment?
  chat        Chat?
  reviews     Review[]      @relation("ServiceRequestReviews")
}

model EmergencyContact {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])
  name         String
  mobileNumber String
}

model Review {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String         @db.ObjectId
  serviceRequest   ServiceRequest @relation("ServiceRequestReviews", fields: [serviceRequestId], references: [id])
  reviewerType     SenderType 
  rating           Int
  comment          String?
  createdAt        DateTime       @default(now())
}

model Payment {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String         @unique @db.ObjectId
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  amount           Float
  status           PaymentStatus

  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?

  comment   String?
  createdAt DateTime @default(now())
}

model Chat {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String         @unique @db.ObjectId
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  messages         Message[]
}

model Message {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId           String    @db.ObjectId
  chat             Chat      @relation(fields: [chatId], references: [id])
  userSenderId     String?   @db.ObjectId
  userSender       User?     @relation("UserMessages", fields: [userSenderId], references: [id])
  mechanicSenderId String?   @db.ObjectId
  mechanicSender   Mechanic? @relation("MechanicMessages", fields: [mechanicSenderId], references: [id])
  content          String
  createdAt        DateTime  @default(now())
}

model SOS {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  latitude  Float
  longitude Float
  createdAt DateTime  @default(now())
  status    SOSStatus
}
