
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  name: 'name',
  email: 'email',
  password: 'password'
};

exports.Prisma.MechanicConfirmationScalarFieldEnum = {
  id: 'id',
  mechanicId: 'mechanicId',
  serviceRequestId: 'serviceRequestId',
  status: 'status',
  distanceText: 'distanceText',
  distanceValue: 'distanceValue',
  durationText: 'durationText',
  durationValue: 'durationValue',
  estimatedCost: 'estimatedCost',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt'
};

exports.Prisma.MechanicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  services: 'services',
  latitude: 'latitude',
  longitude: 'longitude',
  location: 'location',
  expoToken: 'expoToken'
};

exports.Prisma.CarScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  make: 'make',
  model: 'model',
  year: 'year',
  licensePlate: 'licensePlate'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mechanicId: 'mechanicId',
  serviceType: 'serviceType',
  description: 'description',
  latitude: 'latitude',
  longitude: 'longitude',
  address: 'address',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  mobileNumber: 'mobileNumber'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  reviewerType: 'reviewerType',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  mechanicId: 'mechanicId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  amount: 'amount',
  status: 'status',
  razorpayOrderId: 'razorpayOrderId',
  razorpayPaymentId: 'razorpayPaymentId',
  razorpaySignature: 'razorpaySignature',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  serviceRequestId: 'serviceRequestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  senderType: 'senderType',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.SOSScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emergencyContactId: 'emergencyContactId',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  customMessage: 'customMessage',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.ConfirmationStatus = exports.$Enums.ConfirmationStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  REJECTED: 'REJECTED',
  STARTED: 'STARTED'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  TOW: 'TOW',
  LOCKOUT: 'LOCKOUT',
  BATTERY_JUMP: 'BATTERY_JUMP',
  FUEL_DELIVERY: 'FUEL_DELIVERY',
  TIRE_CHANGE: 'TIRE_CHANGE',
  JUMP_START: 'JUMP_START',
  ELECTRIC_CHARGING: 'ELECTRIC_CHARGING',
  CAR_REPAIR: 'CAR_REPAIR',
  CUSTOM_SERVICE: 'CUSTOM_SERVICE'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  REQUESTED: 'REQUESTED',
  NO_MECHANICS_FOUND: 'NO_MECHANICS_FOUND',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.SenderType = exports.$Enums.SenderType = {
  USER: 'USER',
  MECHANIC: 'MECHANIC'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.SOSStatus = exports.$Enums.SOSStatus = {
  ACTIVE: 'ACTIVE',
  RESOLVED: 'RESOLVED'
};

exports.Prisma.ModelName = {
  User: 'User',
  MechanicConfirmation: 'MechanicConfirmation',
  Mechanic: 'Mechanic',
  Car: 'Car',
  ServiceRequest: 'ServiceRequest',
  EmergencyContact: 'EmergencyContact',
  Review: 'Review',
  Payment: 'Payment',
  Chat: 'Chat',
  Message: 'Message',
  SOS: 'SOS'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
